package api

import (
	"fmt"
	"log"
	"net/http"
	"os"

	"github.com/BESTSELLER/terraform-provider-luis/config"
	_ "github.com/BESTSELLER/terraform-provider-luis/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/gorilla/handlers"
	"github.com/gorilla/mux"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	httpSwagger "github.com/swaggo/http-swagger"
)

var (
	httpDuration = promauto.NewHistogramVec(prometheus.HistogramOpts{
		Name: "http_duration_seconds",
		Help: "Duration of HTTP requests.",
	}, []string{"path"})
)

// prometheusMiddleware implements mux.MiddlewareFunc.
func prometheusMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		route := mux.CurrentRoute(r)
		path, _ := route.GetPathTemplate()
		timer := prometheus.NewTimer(httpDuration.WithLabelValues(path))
		next.ServeHTTP(w, r)
		timer.ObserveDuration()
	})
}

// SetupRouter initializes the API routes

// @title {{ values.name }}
// @version 1.0
// @description {{ values.project_short_description }}
// @contact.name {{ values.backstageOwner }}
// @host terraform-provider-luis.k8s.bestcorp.net
// @BasePath /
func SetupRouter() {
	router := mux.NewRouter()
	router.Handle("/metrics", promhttp.Handler())

	loggedRouter := router.PathPrefix("/").Subrouter()

	loggedRouter.Use(prometheusMiddleware)
	loggedRouter.Use(func(next http.Handler) http.Handler { return handlers.CombinedLoggingHandler(os.Stdout, next) })

	loggedRouter.HandleFunc("/", defaultHandler).Methods("GET")
	loggedRouter.HandleFunc("/endpoint1", endpoint1).Methods("GET")
 	
	 // Swagger
 	loggedRouter.HandleFunc("/swagger").Handler(httpSwagger.WrapHandler)
	log.Fatal(http.ListenAndServe(fmt.Sprintf(":%d", config.EnvVars.Port), router))
}

// Root Route
// @Summary Returns the root route
// @Tags root
// @Accept  json
// @Produce  json
// @Success 200
// @Router / [get]
func defaultHandler(w http.ResponseWriter, r *http.Request) {
	fmt.Fprint(w, "This is the default handler")
}

// @Summary gets endpoint1
// @Tags endpoint1
// @Accept  json
// @Produce  json
// @Success 200
// @Router /endpoint1 [get]
func endpoint1(w http.ResponseWriter, r *http.Request) {
	fmt.Fprint(w, "Hello from endpoint1")
}
